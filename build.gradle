/*
 * Copyright 2017 Appmattus Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    ext.kotlin_version = '1.3.0'
    ext.coroutines_version = '1.0.0'
    ext.serialization_version = '0.9.0'
    ext.detekt_version = '1.0.0.RC6'
    ext.dokka_version = '0.9.17'

    repositories {
        google()
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://kotlin.bintray.com/kotlinx" }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.2.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
        classpath "gradle.plugin.io.gitlab.arturbosch.detekt:detekt-gradle-plugin:$detekt_version"
        classpath 'com.novoda:bintray-release:0.8.1'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
        classpath('com.dicedmelon.gradle:jacoco-android:0.1.3') {
            exclude group: 'org.codehaus.groovy', module: 'groovy-all'
        }
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.2'
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:${dokka_version}"
        classpath "org.jetbrains.dokka:dokka-android-gradle-plugin:${dokka_version}"
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0'
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        mavenCentral()
        maven { url "https://kotlin.bintray.com/kotlinx" }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

apply plugin: "io.gitlab.arturbosch.detekt"

detekt {
    version = "$detekt_version"
    profile("main") {
        //noinspection GroovyAssignabilityCheck
        input = "$projectDir"
        filters = ".*test.*,.*androidTest.*,.*/resources/.*,.*/tmp/.*"
        output = "$buildDir/reports/detekt"
        config = "$projectDir/detekt.yml"
    }
}
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'

task jacocoTestReport(type: JacocoReport) {
    sourceDirectories = files()
    classDirectories = files()
    executionData = files()

    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }

    // Work-around to allow us to build list of executionData files in doFirst
    onlyIf = {
        true
    }

    /*
     * Builds list of source dirs, class dirs, and executionData files
     * when task is run, not at script evaluation time
     */
    doFirst {
        subprojects.findAll { subproject ->
            subproject.pluginManager.hasPlugin('jacoco')
        }.each { subproject ->
            subproject.tasks.findAll { task ->
                task instanceof JacocoReport
            }.each { JacocoReport task ->
                additionalSourceDirs task.sourceDirectories
                additionalClassDirs task.classDirectories
                executionData task.executionData
            }
        }

        executionData = files(executionData.findAll {
            it.exists()
        })

        additionalSourceDirs = files(additionalSourceDirs.findAll {
            it.exists()
        })

        additionalClassDirs = files(additionalClassDirs.findAll {
            it.exists()
        })

        coveralls.sourceDirs = additionalSourceDirs.findAll()
    }
}

coveralls {
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"
}

jacocoTestReport { finalizedBy tasks.coveralls }

tasks.coveralls {
    onlyIf { System.env.'CI' }
}

apply plugin: 'org.jetbrains.dokka-android'

dokka {
    outputFormat = "html"
    outputDirectory = "$buildDir/docs/dokka"

    skipDeprecated = true

    kotlinTasks {
        defaultKotlinTasks() + [
                ':layercache:compileKotlin',
                ':layercache-cache2k:compileKotlin',
                ':layercache-ehcache:compileKotlin',
                ':layercache-retrofit:compileKotlin',
                ':layercache-serializer:compileKotlin',
                ':layercache-android:compileReleaseKotlin',
                ':layercache-android-encryption:compileReleaseKotlin',
                ':layercache-android-livedata:compileReleaseKotlin'
        ]
    }

    linkMapping {
        dir = "$rootDir"
        url = "https://github.com/appmattus/layercache/blob/master/"
        suffix = "#L"
    }
}

task check {}

check { finalizedBy dokka }

apply plugin: 'com.github.ben-manes.versions'

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

dependencyUpdates {
    // Disallow release candidates as upgradable versions from stable versions
    resolutionStrategy {
        componentSelection {
            all {
                if (isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)) {
                    reject('Release candidate')
                }
            }
        }
    }
}
